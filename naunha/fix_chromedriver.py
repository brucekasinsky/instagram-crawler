#!/usr/bin/env python3
"""
Script para corrigir problemas com o ChromeDriver
"""

import os
import shutil
import subprocess
from webdriver_manager.chrome import ChromeDriverManager

def clean_webdriver_cache():
    """Limpa o cache do WebDriver Manager"""
    print("üßπ Limpando cache do WebDriver Manager...")
    
    # Caminho do cache do WebDriver Manager
    cache_path = os.path.expanduser("~/.wdm")
    
    if os.path.exists(cache_path):
        try:
            shutil.rmtree(cache_path)
            print(f"‚úÖ Cache removido: {cache_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao remover cache: {str(e)}")
    else:
        print("‚ÑπÔ∏è Cache n√£o encontrado")

def install_chromedriver():
    """Instala o ChromeDriver corretamente"""
    print("üì• Instalando ChromeDriver...")
    
    try:
        # Limpar cache primeiro
        clean_webdriver_cache()
        
        # Instalar ChromeDriver
        driver_path = ChromeDriverManager().install()
        print(f"‚úÖ ChromeDriver instalado em: {driver_path}")
        
        # Verificar se o arquivo √© execut√°vel
        if os.path.exists(driver_path):
            # Tornar execut√°vel
            os.chmod(driver_path, 0o755)
            print("‚úÖ Permiss√µes de execu√ß√£o configuradas")
            
            # Testar se √© execut√°vel
            try:
                result = subprocess.run([driver_path, '--version'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    print(f"‚úÖ ChromeDriver funcionando: {result.stdout.strip()}")
                    return True
                else:
                    print(f"‚ùå ChromeDriver n√£o funcionando: {result.stderr}")
                    return False
            except Exception as e:
                print(f"‚ùå Erro ao testar ChromeDriver: {str(e)}")
                return False
        else:
            print(f"‚ùå Arquivo n√£o encontrado: {driver_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao instalar ChromeDriver: {str(e)}")
        return False

def check_chrome_installation():
    """Verifica se o Chrome est√° instalado"""
    print("üîç Verificando instala√ß√£o do Chrome...")
    
    try:
        # Tentar diferentes comandos para encontrar o Chrome
        chrome_commands = ['google-chrome', 'chrome', 'chromium-browser', 'chromium']
        
        for cmd in chrome_commands:
            try:
                result = subprocess.run([cmd, '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print(f"‚úÖ Chrome encontrado: {result.stdout.strip()}")
                    return True
            except:
                continue
        
        print("‚ùå Chrome n√£o encontrado no sistema")
        print("üí° Instale o Chrome ou Chromium:")
        print("   sudo apt update")
        print("   sudo apt install google-chrome-stable")
        print("   # ou")
        print("   sudo apt install chromium-browser")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar Chrome: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß CORRETOR DE CHROMEDRIVER")
    print("=" * 40)
    
    # 1. Verificar Chrome
    if not check_chrome_installation():
        print("\n‚ùå Chrome n√£o est√° instalado. Instale primeiro.")
        return False
    
    # 2. Limpar cache
    clean_webdriver_cache()
    
    # 3. Instalar ChromeDriver
    if install_chromedriver():
        print("\nüéâ ChromeDriver configurado com sucesso!")
        print("‚úÖ Agora voc√™ pode executar os testes.")
        return True
    else:
        print("\n‚ùå Falha ao configurar ChromeDriver")
        print("üí° Tente instalar manualmente:")
        print("   wget https://chromedriver.storage.googleapis.com/LATEST_RELEASE")
        print("   # Depois baixe a vers√£o correspondente")
        return False

if __name__ == "__main__":
    main()




